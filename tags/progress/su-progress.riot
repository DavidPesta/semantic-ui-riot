<su-progress class="{ props.class }">
  <div class="ui progress { getClass() } { getStates() }" data-percent="{ percent }">
    <div class="bar" style="transition-duration: 300ms; width: { percent }%;">
      <div if="{ isProgress() }" class="progress">{ percent }%</div>
    </div>
    <div class="label">
      <slot />
    </div>
  </div>

  <style>
    .ui.progress:last-child {
      margin: 0 0 2.5em;
    }

    :host.attached {
      display: block;
      height: 0.2rem;
      padding: 0px;
      overflow: hidden;
      border-radius: 0em 0em 0.28571429rem 0.28571429rem;
      position: absolute;
      left: 0;
      width: 100%;
    }

    :host.top.attached {
      top: 0px;
      bottom: 100%;
      border-radius: 0.28571429rem 0.28571429rem 0em 0em;
    }

    :host.bottom.attached {
      top: 100%;
      bottom: auto;
    }
  </style>

  <script>
    export default {
      state: {
        value: null,
      },
      lastPropsValue: null,
      lastValue: null,
      total: 100,

      onMounted,
      onUpdated,
      getClass,
      getStates,
      isProgress,
    }

    // ===================================================================================
    //                                                                           Lifecycle
    //                                                                           =========
    function onMounted() {
      this.value = props.value || 0
      if (props.total > 0) {
        total = props.total
      }
      this.percent = getPercent(this)
      this.lastValue = this.value
      this.lastPropsValue = props.value
      this.update()
    }

    function onUpdated() {
      let changed = false
      if (this.state.value >= total) {
        this.state.value = total
      }
      if (this.state.value <= 0) {
        this.state.value = 0
      }
      if (this.lastValue != this.state.value) {
        this.lastValue = this.state.value
        changed = true
      } else if (this.lastPropsValue != props.value) {
        this.state.value = props.value
        this.lastPropsValue = props.value
        this.lastValue = props.value
        changed = true
      }

      if (changed) {
        this.percent = getPercent(this)
      }
    }

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    function getClass() {
      const excludeClasses = ['progress', 'active']
      return Array.apply(null, this.root.classList).filter(clazz => {
        return !excludeClasses.some(excludeClass => excludeClass == clazz)
      }).join(' ')
    }

    function getStates() {
      if (isSuccess(this)) {
        return 'success'
      }
      if (isActive(this)) {
        return 'active'
      }
    }

    function isProgress() {
      return hasClass(this, 'progress')
    }

    // ===================================================================================
    //                                                                               Logic
    //                                                                               =====
    function getPercent(tag) {
      return parseInt(tag.value / total * 100)
    }

    function isActive(tag) {
      return hasClass(tag, 'active') && tag.percent > 0 && tag.percent < 100
    }

    function isSuccess(tag) {
      return tag.percent == 100
    }

    function hasClass(tag, className) {
      return tag.root.classList.contains(className)
    }
  </script>
</su-progress>